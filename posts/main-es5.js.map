{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/create-post/create-post.component.ts","webpack:///src/app/components/create-post/create-post.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/navigation/navigation.component.ts","webpack:///src/app/components/navigation/navigation.component.html","webpack:///src/app/components/posts/posts.component.ts","webpack:///src/app/components/posts/posts.component.html","webpack:///src/app/components/signup/signup.component.ts","webpack:///src/app/components/signup/signup.component.html","webpack:///src/app/services/auth-guard.service.ts","webpack:///src/app/services/auth-interceptor.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/error-handler.service.ts","webpack:///src/app/services/post.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","CreatePostComponent","authService","postService","create","isOpen","form","createFormGroup","required","minLength","body","formData","createPost","userId","pipe","subscribe","emit","reset","formDirective","resetForm","HomeComponent","LoginComponent","loginForm","email","password","login","value","NavigationComponent","router","isAuthenticated","isUserLoggedIn$","isLoggedIn","localStorage","removeItem","next","navigate","PostsComponent","posts$","fetchAll","postId","deletePost","SignupComponent","signupForm","name","signup","msg","console","log","AuthGuard","providedIn","AuthInterceptorService","token","getItem","clonedRequest","clone","headers","set","handle","AuthService","http","errorHandlerService","url","httpOptions","user","post","handleError","tokenObject","setItem","ErrorHandlerService","operation","result","error","message","PostService","get","responseType","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { AuthGuard } from \"./services/auth-guard.service\";\r\n\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { PostsComponent } from \"./components/posts/posts.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { SignupComponent } from \"./components/signup/signup.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", component: HomeComponent },\r\n  { path: \"posts\", component: PostsComponent, canActivate: [AuthGuard] },\r\n  { path: \"login\", component: LoginComponent },\r\n  { path: \"signup\", component: SignupComponent },\r\n  { path: \"**\", redirectTo: \"\" },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'posts';\r\n}\r\n","<app-navigation></app-navigation>\r\n<div class=\"container\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\n\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { NoopAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\n\r\nimport { NavigationComponent } from \"./components/navigation/navigation.component\";\r\nimport { SignupComponent } from \"./components/signup/signup.component\";\r\nimport { LoginComponent } from \"./components/login/login.component\";\r\nimport { HomeComponent } from \"./components/home/home.component\";\r\nimport { PostsComponent } from \"./components/posts/posts.component\";\r\nimport { CreatePostComponent } from \"./components/create-post/create-post.component\";\r\n\r\nimport { AuthInterceptorService } from \"./services/auth-interceptor.service\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavigationComponent,\r\n    SignupComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    PostsComponent,\r\n    CreatePostComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    NoopAnimationsModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatToolbarModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptorService,\r\n      multi: true,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  Output,\r\n  EventEmitter,\r\n} from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators, NgForm } from \"@angular/forms\";\r\n\r\nimport { first } from \"rxjs/operators\";\r\n\r\nimport { Post } from \"src/app/models/Post\";\r\n\r\nimport { AuthService } from \"src/app/services/auth.service\";\r\nimport { PostService } from \"src/app/services/post.service\";\r\n\r\n@Component({\r\n  selector: \"app-create-post\",\r\n  templateUrl: \"./create-post.component.html\",\r\n  styleUrls: [\"./create-post.component.scss\"],\r\n})\r\nexport class CreatePostComponent implements OnInit {\r\n  @ViewChild(\"formDirective\") formDirective: NgForm;\r\n  @Output() create: EventEmitter<any> = new EventEmitter();\r\n\r\n  form: FormGroup;\r\n\r\n  isOpen = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private postService: PostService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.createFormGroup();\r\n  }\r\n\r\n  createFormGroup(): FormGroup {\r\n    return new FormGroup({\r\n      title: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.minLength(5),\r\n      ]),\r\n      body: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  onSubmit(formData: Pick<Post, \"title\" | \"body\">): void {\r\n    this.postService\r\n      .createPost(formData, this.authService.userId)\r\n      .pipe(first())\r\n      .subscribe(() => {\r\n        this.create.emit(null);\r\n      });\r\n    this.form.reset();\r\n    this.formDirective.resetForm();\r\n  }\r\n}\r\n","<button (click)=\"isOpen = !isOpen\" mat-raised-button color=\"accent\">\r\n  <mat-icon>add</mat-icon>Create post\r\n</button>\r\n<form\r\n  *ngIf=\"isOpen\"\r\n  [formGroup]=\"form\"\r\n  #formDirective=\"ngForm\"\r\n  (ngSubmit)=\"onSubmit(form.value)\"\r\n  novalidate\r\n>\r\n  <mat-form-field>\r\n    <mat-label>Post Title</mat-label>\r\n    <input matInput formControlName=\"title\" />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Post body</mat-label>\r\n    <input matInput formControlName=\"body\" />\r\n  </mat-form-field>\r\n  <button\r\n    color=\"accent\"\r\n    [disabled]=\"!form.valid\"\r\n    mat-raised-button\r\n    type=\"submit\"\r\n  >\r\n    <span>Post</span>\r\n  </button>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>Welcome to the Social Posts home page!</p>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\n\r\nimport { AuthService } from \"src/app/services/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.createFormGroup();\r\n  }\r\n\r\n  createFormGroup(): FormGroup {\r\n    return new FormGroup({\r\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\r\n      password: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.minLength(7),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  login(): void {\r\n    this.authService\r\n      .login(this.loginForm.value.email, this.loginForm.value.password)\r\n      .subscribe();\r\n  }\r\n}\r\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\" novalidate>\r\n  <mat-form-field>\r\n    <mat-label>Email</mat-label>\r\n    <input matInput placeholder=\"Ex. Jon\" formControlName=\"email\" />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Password</mat-label>\r\n    <input\r\n      matInput\r\n      type=\"password\"\r\n      placeholder=\"Ex. Jon\"\r\n      formControlName=\"password\"\r\n    />\r\n  </mat-form-field>\r\n  <button\r\n    color=\"accent\"\r\n    [disabled]=\"!loginForm.valid\"\r\n    mat-raised-button\r\n    type=\"submit\"\r\n  >\r\n    <span>Log in</span>\r\n  </button>\r\n</form>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { AuthService } from \"src/app/services/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-navigation\",\r\n  templateUrl: \"./navigation.component.html\",\r\n  styleUrls: [\"./navigation.component.scss\"],\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n  isAuthenticated = false;\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.authService.isUserLoggedIn$.subscribe((isLoggedIn) => {\r\n      this.isAuthenticated = isLoggedIn;\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(\"token\");\r\n    this.authService.isUserLoggedIn$.next(false);\r\n    this.router.navigate([\"login\"]);\r\n  }\r\n}\r\n","<mat-toolbar color=\"accent\">\r\n  <span>\r\n    <a routerLink=\"/\">\r\n      <span>Social Posts</span>\r\n    </a>\r\n  </span>\r\n  <span>\r\n    <a\r\n      *ngIf=\"isAuthenticated\"\r\n      routerLinkActive=\"active-link\"\r\n      routerLink=\"/posts\"\r\n    >\r\n      <span>Posts</span>\r\n    </a>\r\n    <a\r\n      *ngIf=\"!isAuthenticated\"\r\n      routerLinkActive=\"active-link\"\r\n      routerLink=\"/login\"\r\n    >\r\n      <span>Login</span>\r\n    </a>\r\n    <a\r\n      *ngIf=\"isAuthenticated\"\r\n      (click)=\"logout()\"\r\n      routerLinkActive=\"active-link\"\r\n      routerLink=\"/login\"\r\n    >\r\n      <span>Logout</span>\r\n    </a>\r\n    <a\r\n      *ngIf=\"!isAuthenticated\"\r\n      routerLinkActive=\"active-link\"\r\n      routerLink=\"/signup\"\r\n    >\r\n      <span>Signup</span>\r\n    </a>\r\n  </span>\r\n</mat-toolbar>\r\n","import { Component, OnInit } from \"@angular/core\";\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { PostService } from \"src/app/services/post.service\";\r\nimport { AuthService } from \"src/app/services/auth.service\";\r\n\r\nimport { Post } from \"src/app/models/Post\";\r\nimport { User } from \"src/app/models/User\";\r\n\r\n@Component({\r\n  selector: \"app-posts\",\r\n  templateUrl: \"./posts.component.html\",\r\n  styleUrls: [\"./posts.component.scss\"],\r\n})\r\nexport class PostsComponent implements OnInit {\r\n  posts$: Observable<Post[]>;\r\n  userId: Pick<User, \"id\">;\r\n\r\n  constructor(\r\n    private postService: PostService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.posts$ = this.fetchAll();\r\n    this.userId = this.authService.userId;\r\n  }\r\n\r\n  fetchAll(): Observable<Post[]> {\r\n    return this.postService.fetchAll();\r\n  }\r\n\r\n  createPost(): void {\r\n    this.posts$ = this.fetchAll();\r\n  }\r\n\r\n  delete(postId: Pick<Post, \"id\">): void {\r\n    this.postService\r\n      .deletePost(postId)\r\n      .subscribe(() => (this.posts$ = this.fetchAll()));\r\n  }\r\n}\r\n","<app-create-post (create)=\"createPost()\"></app-create-post>\r\n\r\n<mat-card *ngFor=\"let post of posts$ | async\">\r\n  <button *ngIf=\"post.user === userId\" mat-icon-button>\r\n    <mat-icon (click)=\"delete(post.id)\" color=\"warn\">delete</mat-icon>\r\n  </button>\r\n  <div class=\"post-title\">\r\n    {{ post.title }}\r\n  </div>\r\n  <div class=\"post-meta\">\r\n    {{ post.created }}\r\n  </div>\r\n  <div class=\"post-body\">\r\n    {{ post.body }}\r\n  </div>\r\n</mat-card>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { AuthService } from \"src/app/services/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-signup\",\r\n  templateUrl: \"./signup.component.html\",\r\n  styleUrls: [\"./signup.component.scss\"],\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  signupForm: FormGroup;\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.signupForm = this.createFormGroup();\r\n  }\r\n\r\n  createFormGroup(): FormGroup {\r\n    return new FormGroup({\r\n      name: new FormControl(\"\", [Validators.required, Validators.minLength(2)]),\r\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\r\n      password: new FormControl(\"\", [\r\n        Validators.required,\r\n        Validators.minLength(7),\r\n      ]),\r\n    });\r\n  }\r\n\r\n  signup(): void {\r\n    this.authService.signup(this.signupForm.value).subscribe((msg) => {\r\n      console.log(msg);\r\n      this.router.navigate([\"login\"]);\r\n    });\r\n  }\r\n}\r\n","<form [formGroup]=\"signupForm\" (ngSubmit)=\"signup()\" novalidate>\r\n  <mat-form-field>\r\n    <mat-label>First name</mat-label>\r\n    <input matInput placeholder=\"Ex. Jon\" formControlName=\"name\" />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Email</mat-label>\r\n    <input matInput placeholder=\"Ex. Jon\" formControlName=\"email\" />\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Password</mat-label>\r\n    <input\r\n      matInput\r\n      type=\"password\"\r\n      placeholder=\"Ex. Jon\"\r\n      formControlName=\"password\"\r\n    />\r\n  </mat-form-field>\r\n  <button\r\n    color=\"accent\"\r\n    [disabled]=\"!signupForm.valid\"\r\n    mat-raised-button\r\n    type=\"submit\"\r\n  >\r\n    <span>Sign up</span>\r\n  </button>\r\n</form>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { CanActivate, Router } from \"@angular/router\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    if (!this.authService.isUserLoggedIn$.value) {\r\n      this.router.navigate([\"signup\"]);\r\n    }\r\n    return this.authService.isUserLoggedIn$;\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n} from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const clonedRequest = req.clone({\r\n        headers: req.headers.set(\"Authorization\", \"Bearer \" + token),\r\n      });\r\n      return next.handle(clonedRequest);\r\n    } else {\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { first, catchError, tap } from \"rxjs/operators\";\r\n\r\nimport { User } from \"../models/User\";\r\nimport { ErrorHandlerService } from \"./error-handler.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  private url = \"http://localhost:3000/auth\";\r\n\r\n  isUserLoggedIn$ = new BehaviorSubject<boolean>(false);\r\n  userId: Pick<User, \"id\">;\r\n\r\n  httpOptions: { headers: HttpHeaders } = {\r\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlerService: ErrorHandlerService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  signup(user: Omit<User, \"id\">): Observable<User> {\r\n    return this.http\r\n      .post<User>(`${this.url}/signup`, user, this.httpOptions)\r\n      .pipe(\r\n        first(),\r\n        catchError(this.errorHandlerService.handleError<User>(\"signup\"))\r\n      );\r\n  }\r\n\r\n  login(\r\n    email: Pick<User, \"email\">,\r\n    password: Pick<User, \"password\">\r\n  ): Observable<{\r\n    token: string;\r\n    userId: Pick<User, \"id\">;\r\n  }> {\r\n    return this.http\r\n      .post(`${this.url}/login`, { email, password }, this.httpOptions)\r\n      .pipe(\r\n        first(),\r\n        tap((tokenObject: { token: string; userId: Pick<User, \"id\"> }) => {\r\n          this.userId = tokenObject.userId;\r\n          localStorage.setItem(\"token\", tokenObject.token);\r\n          this.isUserLoggedIn$.next(true);\r\n          this.router.navigate([\"posts\"]);\r\n        }),\r\n        catchError(\r\n          this.errorHandlerService.handleError<{\r\n            token: string;\r\n            userId: Pick<User, \"id\">;\r\n          }>(\"login\")\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ErrorHandlerService {\r\n  handleError<T>(operation = \"operation\", result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { catchError, first } from \"rxjs/operators\";\r\n\r\nimport { Post } from \"../models/Post\";\r\nimport { User } from \"../models/User\";\r\nimport { ErrorHandlerService } from \"./error-handler.service\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class PostService {\r\n  private url = \"http://localhost:3000/post\";\r\n\r\n  httpOptions: { headers: HttpHeaders } = {\r\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private errorHandlerService: ErrorHandlerService\r\n  ) {}\r\n\r\n  fetchAll(): Observable<Post[]> {\r\n    return this.http\r\n      .get<Post[]>(this.url, { responseType: \"json\" })\r\n      .pipe(\r\n        catchError(this.errorHandlerService.handleError<Post[]>(\"fetchAll\", []))\r\n      );\r\n  }\r\n\r\n  createPost(\r\n    formData: Partial<Post>,\r\n    userId: Pick<User, \"id\">\r\n  ): Observable<Post> {\r\n    return this.http\r\n      .post<Post>(\r\n        this.url,\r\n        { title: formData.title, body: formData.body, user: userId },\r\n        this.httpOptions\r\n      )\r\n      .pipe(\r\n        catchError(this.errorHandlerService.handleError<Post>(\"createPost\"))\r\n      );\r\n  }\r\n\r\n  deletePost(postId: Pick<Post, \"id\">): Observable<{}> {\r\n    return this.http\r\n      .delete<Post>(`${this.url}/${postId}`, this.httpOptions)\r\n      .pipe(\r\n        first(),\r\n        catchError(this.errorHandlerService.handleError<Post>(\"deletePost\"))\r\n      );\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}